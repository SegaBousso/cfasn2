import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/models.dart';

class BookingService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'bookings';

  // Cr√©er une nouvelle r√©servation
  Future<String?> createBooking(BookingModel booking) async {
    try {
      print('Tentative de cr√©ation de r√©servation: ${booking.id}');
      print('Donn√©es: ${booking.toFirestore()}');

      // Validation des donn√©es avant cr√©ation
      if (!_validateBookingData(booking)) {
        throw Exception('Donn√©es de r√©servation invalides');
      }

      // V√©rifier si la r√©servation existe d√©j√†
      final existingDoc = await _firestore
          .collection(_collection)
          .doc(booking.id)
          .get();

      if (existingDoc.exists) {
        throw Exception('Une r√©servation avec cet ID existe d√©j√†');
      }

      // V√©rifier la disponibilit√© du service (optionnel)
      final serviceAvailable = await _checkServiceAvailability(
        booking.service.id,
        booking.serviceDate,
      );

      if (!serviceAvailable) {
        throw Exception('Service non disponible √† cette date');
      }

      // Cr√©er la r√©servation avec un timestamp serveur
      final bookingData = booking.toFirestore();
      bookingData['createdAt'] = FieldValue.serverTimestamp();
      bookingData['updatedAt'] = FieldValue.serverTimestamp();

      await _firestore.collection(_collection).doc(booking.id).set(bookingData);

      // Optionnel: Mettre √† jour les statistiques du service
      await _updateServiceBookingCount(booking.service.id, increment: true);

      print('R√©servation cr√©√©e avec succ√®s: ${booking.id}');
      return booking.id;
    } catch (e) {
      print('Erreur lors de la cr√©ation de la r√©servation: $e');
      print('Stack trace: ${StackTrace.current}');
      rethrow; // Relancer l'exception pour que l'appelant puisse la g√©rer
    }
  }

  // Cr√©er une r√©servation compl√®te avec transaction
  Future<String?> createBookingWithTransaction(
    BookingModel booking, {
    bool sendNotification = true,
    bool processPayment = false,
  }) async {
    WriteBatch batch = _firestore.batch();

    try {
      print('üöÄ D√©but de la transaction de r√©servation: ${booking.id}');

      // Validation des donn√©es
      if (!_validateBookingData(booking)) {
        throw Exception('Donn√©es de r√©servation invalides');
      }

      // V√©rifier la disponibilit√©
      final serviceAvailable = await _checkServiceAvailability(
        booking.service.id,
        booking.serviceDate,
      );

      if (!serviceAvailable) {
        throw Exception('Service non disponible √† cette date');
      }

      // 1. Cr√©er la r√©servation
      final bookingRef = _firestore.collection(_collection).doc(booking.id);
      final bookingData = booking.toFirestore();
      bookingData['createdAt'] = FieldValue.serverTimestamp();
      bookingData['updatedAt'] = FieldValue.serverTimestamp();

      batch.set(bookingRef, bookingData);

      // 2. Mettre √† jour les statistiques du service
      final serviceRef = _firestore
          .collection('services')
          .doc(booking.service.id);
      batch.update(serviceRef, {
        'bookingCount': FieldValue.increment(1),
        'lastBookedAt': FieldValue.serverTimestamp(),
      });

      // 3. Cr√©er une notification pour le prestataire (si demand√©)
      if (sendNotification && booking.providerId != null) {
        final notificationRef = _firestore.collection('notifications').doc();
        batch.set(notificationRef, {
          'userId': booking.providerId,
          'title': 'Nouvelle r√©servation',
          'body':
              'Vous avez une nouvelle r√©servation pour ${booking.service.name}',
          'type': 'booking_new',
          'data': {'bookingId': booking.id, 'serviceId': booking.service.id},
          'isRead': false,
          'createdAt': FieldValue.serverTimestamp(),
        });
      }

      // 4. Cr√©er une entr√©e d'audit
      final auditRef = _firestore.collection('bookingAudit').doc();
      batch.set(auditRef, {
        'bookingId': booking.id,
        'action': 'created',
        'userId': booking.userId,
        'details': {
          'serviceId': booking.service.id,
          'serviceName': booking.service.name,
          'amount': booking.totalAmount,
          'serviceDate': Timestamp.fromDate(booking.serviceDate),
        },
        'createdAt': FieldValue.serverTimestamp(),
      });

      // Ex√©cuter la transaction
      await batch.commit();

      print('‚úÖ R√©servation et transaction cr√©√©es avec succ√®s: ${booking.id}');
      return booking.id;
    } catch (e) {
      print('‚ùå Erreur lors de la transaction de r√©servation: $e');
      rethrow;
    }
  }

  // Validation des donn√©es de r√©servation
  bool _validateBookingData(BookingModel booking) {
    // V√©rifications de base
    if (booking.id.isEmpty) {
      print('‚ùå ID de r√©servation vide');
      return false;
    }

    if (booking.userId.isEmpty) {
      print('‚ùå ID utilisateur vide');
      return false;
    }

    if (booking.service.id.isEmpty) {
      print('‚ùå ID service vide');
      return false;
    }

    // Le prestataire peut √™tre assign√© plus tard pour certains services
    // Permettre les r√©servations sans prestataire assign√© (sera assign√© par l'admin)
    if (booking.providerId != null && booking.providerId!.isEmpty) {
      print('‚ö†Ô∏è ID prestataire fourni mais vide - sera assign√© plus tard');
    }

    // V√©rifier que la date n'est pas dans le pass√©
    if (booking.serviceDate.isBefore(DateTime.now())) {
      print('‚ùå Date de r√©servation dans le pass√©');
      return false;
    }

    // V√©rifier que le prix est positif
    if (booking.totalAmount <= 0) {
      print('‚ùå Prix total invalide');
      return false;
    }

    return true;
  }

  // V√©rifier la disponibilit√© du service
  Future<bool> _checkServiceAvailability(
    String serviceId,
    DateTime serviceDate,
  ) async {
    try {
      // V√©rifier si le service existe et est actif
      final serviceDoc = await _firestore
          .collection('services')
          .doc(serviceId)
          .get();

      if (!serviceDoc.exists) {
        print('‚ùå Service introuvable: $serviceId');
        return false;
      }

      final serviceData = serviceDoc.data() as Map<String, dynamic>;
      if (serviceData['isActive'] != true ||
          serviceData['isAvailable'] != true) {
        print('‚ùå Service non disponible: $serviceId');
        return false;
      }

      // Optionnel: V√©rifier s'il n'y a pas trop de r√©servations pour cette date
      final sameDateBookings = await _firestore
          .collection(_collection)
          .where('serviceId', isEqualTo: serviceId)
          .where(
            'serviceDate',
            isGreaterThanOrEqualTo: Timestamp.fromDate(
              DateTime(serviceDate.year, serviceDate.month, serviceDate.day),
            ),
          )
          .where(
            'serviceDate',
            isLessThan: Timestamp.fromDate(
              DateTime(
                serviceDate.year,
                serviceDate.month,
                serviceDate.day + 1,
              ),
            ),
          )
          .where(
            'status',
            whereIn: [
              BookingStatus.pending.toString().split('.').last,
              BookingStatus.confirmed.toString().split('.').last,
            ],
          )
          .get();

      // Limite arbitraire de 10 r√©servations par jour pour un service
      const maxBookingsPerDay = 10;
      if (sameDateBookings.docs.length >= maxBookingsPerDay) {
        print('‚ùå Trop de r√©servations pour cette date');
        return false;
      }

      return true;
    } catch (e) {
      print('Erreur lors de la v√©rification de disponibilit√©: $e');
      return false;
    }
  }

  // Mettre √† jour le nombre de r√©servations d'un service
  Future<void> _updateServiceBookingCount(
    String serviceId, {
    required bool increment,
  }) async {
    try {
      await _firestore.collection('services').doc(serviceId).update({
        'bookingCount': FieldValue.increment(increment ? 1 : -1),
        'lastBookedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('Erreur lors de la mise √† jour du compteur de r√©servations: $e');
      // Ne pas faire √©chouer la r√©servation si cette mise √† jour √©choue
    }
  }

  // R√©cup√©rer les r√©servations d'un utilisateur
  Future<List<BookingModel>> getUserBookings(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true)
          .get();

      return querySnapshot.docs
          .map((doc) => BookingModel.fromFirestore(doc))
          .toList();
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration des r√©servations: $e');
      return [];
    }
  }

  // R√©cup√©rer les r√©servations d'un prestataire
  Future<List<BookingModel>> getProviderBookings(String providerId) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('providerId', isEqualTo: providerId)
          .orderBy('createdAt', descending: true)
          .get();

      return querySnapshot.docs
          .map((doc) => BookingModel.fromFirestore(doc))
          .toList();
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration des r√©servations: $e');
      return [];
    }
  }

  // Mettre √† jour le statut d'une r√©servation
  Future<bool> updateBookingStatus(
    String bookingId,
    BookingStatus status,
  ) async {
    try {
      await _firestore.collection(_collection).doc(bookingId).update({
        'status': status.toString().split('.').last,
        'updatedAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('Erreur lors de la mise √† jour du statut: $e');
      return false;
    }
  }

  // Annuler une r√©servation
  Future<bool> cancelBooking(String bookingId, String reason) async {
    try {
      await _firestore.collection(_collection).doc(bookingId).update({
        'status': BookingStatus.cancelled.toString().split('.').last,
        'cancellationReason': reason,
        'updatedAt': FieldValue.serverTimestamp(),
      });
      return true;
    } catch (e) {
      print('Erreur lors de l\'annulation: $e');
      return false;
    }
  }

  // Stream des r√©servations en temps r√©el
  Stream<List<BookingModel>> getUserBookingsStream(String userId) {
    return _firestore
        .collection(_collection)
        .where('userId', isEqualTo: userId)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map(
          (snapshot) => snapshot.docs
              .map((doc) => BookingModel.fromFirestore(doc))
              .toList(),
        );
  }

  // Obtenir les statistiques de r√©servation
  Future<Map<String, dynamic>> getBookingStats({
    String? userId,
    String? providerId,
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      Query query = _firestore.collection(_collection);

      // Filtrer par utilisateur ou prestataire
      if (userId != null) {
        query = query.where('userId', isEqualTo: userId);
      } else if (providerId != null) {
        query = query.where('providerId', isEqualTo: providerId);
      }

      // Filtrer par p√©riode
      if (startDate != null) {
        query = query.where(
          'createdAt',
          isGreaterThanOrEqualTo: Timestamp.fromDate(startDate),
        );
      }
      if (endDate != null) {
        query = query.where(
          'createdAt',
          isLessThanOrEqualTo: Timestamp.fromDate(endDate),
        );
      }

      final snapshot = await query.get();
      final bookings = snapshot.docs
          .map((doc) => BookingModel.fromFirestore(doc))
          .toList();

      // Calculer les statistiques
      int totalBookings = bookings.length;
      int confirmedBookings = bookings
          .where((b) => b.status == BookingStatus.confirmed)
          .length;
      int completedBookings = bookings
          .where((b) => b.status == BookingStatus.completed)
          .length;
      int cancelledBookings = bookings
          .where((b) => b.status == BookingStatus.cancelled)
          .length;

      double totalRevenue = bookings
          .where(
            (b) =>
                b.status == BookingStatus.completed ||
                b.status == BookingStatus.confirmed,
          )
          .fold(0.0, (sum, booking) => sum + booking.totalAmount);

      double averageBookingValue = totalBookings > 0
          ? totalRevenue / totalBookings
          : 0.0;

      // R√©partition par statut
      Map<BookingStatus, int> statusDistribution = {};
      for (BookingStatus status in BookingStatus.values) {
        statusDistribution[status] = bookings
            .where((b) => b.status == status)
            .length;
      }

      return {
        'totalBookings': totalBookings,
        'confirmedBookings': confirmedBookings,
        'completedBookings': completedBookings,
        'cancelledBookings': cancelledBookings,
        'totalRevenue': totalRevenue,
        'averageBookingValue': averageBookingValue,
        'statusDistribution': statusDistribution.map(
          (k, v) => MapEntry(k.toString(), v),
        ),
        'conversionRate': totalBookings > 0
            ? (completedBookings / totalBookings) * 100
            : 0.0,
      };
    } catch (e) {
      print('Erreur lors du calcul des statistiques: $e');
      return {};
    }
  }

  // Obtenir les cr√©neaux occup√©s pour un service √† une date donn√©e
  Future<List<DateTime>> getOccupiedTimeSlots(
    String serviceId,
    DateTime date,
  ) async {
    try {
      final startOfDay = DateTime(date.year, date.month, date.day);
      final endOfDay = DateTime(date.year, date.month, date.day, 23, 59, 59);

      final snapshot = await _firestore
          .collection(_collection)
          .where('service.id', isEqualTo: serviceId)
          .where(
            'serviceDate',
            isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay),
          )
          .where(
            'serviceDate',
            isLessThanOrEqualTo: Timestamp.fromDate(endOfDay),
          )
          .where(
            'status',
            whereIn: [
              BookingStatus.pending.toString().split('.').last,
              BookingStatus.confirmed.toString().split('.').last,
              BookingStatus.inProgress.toString().split('.').last,
            ],
          )
          .get();

      return snapshot.docs
          .map((doc) => BookingModel.fromFirestore(doc))
          .map((booking) => booking.serviceDate)
          .toList();
    } catch (e) {
      print('Erreur lors de la r√©cup√©ration des cr√©neaux occup√©s: $e');
      return [];
    }
  }
}
